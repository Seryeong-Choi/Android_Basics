-dpi : dot per inch
-dp : density independent pixel : 픽셀 독립적인 단위

**androidx가 최신이므로 androidx 선택하는게 좋음
**override shortcut : ctrl + O

# Activity
- 앱의 한 화면
- Life cycle
- onCreate : 액티비티 생성시 단 한 번만 호출
- onStart
- onResume : 앱으로 다시 돌아올 때 무조건 호출
- onPause : 화면의 일부가 가려졌을때
- onStop : 화면 전부가 보이지 않을때. 근데 onPause와 onStop을 구분하기 애매하군

# Intent
- 의도, 요구, 의사전달, 요청
- 요청 관계 : Activity와 Activity / Android System과 내 app / 다른 app과 내 app -> 상호합의가 있어야 사용 가능
- 요청의 종류 : 전달만 하는 요청 / 리턴받는 요청
- 인텐트의 종류 : 명시적인텐트(정확히 대상에게 요청) / 암시적인턴트(할 수 있는 대상에게 요청)

# Context
- 문맥
- 액티비티가 갖고 있는 주변 정보

# Task
- 액티비티는 스택으로 관리됨!!
- 런치모드나 인텐트플래그로 원하는대로 스택 관리 가능하지만 사용하는게 매우 어려우므로 정확히 이해해야됨
- 켜지는 방법을 자체 속성으로 가지고있는 경우 : launchMode
- 켜지는 방법을 지시하는 경우 : IntentFlag
- LaunchMode
    - 다중 허용 : Standard, singleTop(조건부->열려고 하는 액티비티가 현재 액티비티라면 onNewIntent를 호출함)
    - 비허용 : singleTask, 1singleInstance
- IntentFlag : FLAG_ACTIVITY_NEW_TASK, FLAG_ACTIVITY_SINGLE_TOP, FLAG_ACTIVITY_CLEAR_TOP 등등
- 궁금하면 구글 디벨로퍼에서 작업 및 백 스택 문서 확인하기

#Fragment // 5-23 설명 복습
- Activity : 앱에 보이는 한 화면의 단위이지만 정확한 설명은 아니다
- 액티비티가 길어지면 관리 포인트가 많아진다 -> 관리가 어렵다
- 안드로이드는 디바이스가 너무 다양하다 -> 태블릿에서는 UI 완전 다르게 만들어야됨
- fragment는 액티비티의 파트를 나누어서 책임진다 -> 상술한 액티비티의 문제를 해결할 수 있다

- fragment에도 라이프사이클이 존재하며 액티비티 종속적이다 -> fragment의 라이프사이클도 관리해야하는 문제점이 발생함
- 쓸지 말지는 선택 가능하지만 쓰는게 유지보수 편하다(개인차 있음)
- XML에 ViewComponent로 추가하거나 코드로(동적)추가한다
- 데이터 전달 방법
    - Activity -> Fragment : argument와 bundle
    - Fragment -> Activity : 자체 구현(Listener 구현) 5-24강

#Null Safety
- ? 와 !!
- button?.setOnClickListener : null이 아니면 실행하겠다
- button!!.setOnClickListener : null이 아님을 개발자가 보장하는것이므로 정말 확실할때만 써야함

#lateinit
- 나중에 초기값 세팅
- 초기값이 세팅되지 않았을 때 호출하면 에러발생함
- lateinit 사용할거면 사용 직전에 초기화 필요
- 사용 비추천한다

#res-values의 파일 적극활용

#Context
- 중요하다
- ActivityManagerService(개발 편하도록 미리 구현해둔 기능)에 접근하도록 해주는 역할
- 또는 주변정보
- 많은 부분이 이미 만들어져 있다 -> 이것들을 사용하기 위해서는 Context가 필요한 경우가 많다
- 종류 : activity의 context / application의 context
- application은 activity를 포함한다 (앱 전체의 정보)

#Thread
- 작업 흐름
- 안드로이드 Main Thread : UI Thread라고도 한다 -> 사용자의 input을 받는 thread이므로 절대 정지시킬 수 없음!!
- UI 관련된 것은 메인thread만 바꿀 수 있음
- thread 쓸 일은 거의없다, 관리가 매우 어렵다

#Framework
- 안드로이드스튜디오 등등
- 개발 하기 위해 지키는 틀

#Library
- 개발에 필요한 도구가 미리 구현되어 있는 것
- 함수나 클래스로 구현되어잇음
- 프레임워크에 없는 기능을 제공하거나 프레임워크에서 하기 힘든 것을 쉽게 할 수 있게 함

- build.gradle에 내용 추가하고 sync 하면 설치됨

#Listview
- 유사하게 반복되는 뷰를 그리기 위한 도구
- 그리는 방법 : addView, Listview, RecycleView
- addView : 실제로 리스트뷰를 그리기 위해 잘 사용되지 않는다, 스크롤이 자동으로 만들어지지 않아 ScrollView 넣어야 함 -> 거의 안 씀
    - item을 담을 xmㅣ을 만든다
    - xml에 내용을 채운다
    - container view에 더한다
    - 이걸 반복한다
- listView : 예전에 많이 사용 -> 아이템 개수 많을때 쓴다
    - 리스트로 만들고 싶은 아이템의 리스트 준비
    - Adapter를 이용한다
- addView와 Listview의 차이 : 만드는 방식, 그리는 방식이 다르다
    - addView : 리스트 개수와 상관없이 한번에 다 그린다
    - ListView : 보이는부분 + 알파만 한번에 그리고 필요한 경우 더 그린다
- RecyclerView : 최근에 가장 많이 쓰고 효율 높다 -> 얘를 항상 쓰면 된다
    - 장점 :
        - ListView의 개선판으로 ViewHolder를 포함한다
        - 유연하다 -> LayoutManager(Linear / Grid / StaggeredGrid)

#tablayout
- 텝을 담당

#Pager
- 화면을 종이 넘기듯 넘기는 역할

#Adapter
- Tablayout과 Pager를 연결하기 위해서 어댑터 필요함

#안드로이드DB
- SQLite
- SharePreference -> 공유된 사용자의 기호를 저장하기 위한 DB, Key-Value 방식
    - 얘로 하드한 DB 구축불가(하면 안 됨)
            //Mode
            //-MODE_PRIVATE : 생성한 앱에서만 사용 가능
            //-MODE_WORLD_READABLE : 다른 앱에서 사용 가능 -> 읽기만 가능
            //-MODE_WORLD_WRITEABLE : 다른 앱에서 사용 가능 -> 기록도 가능
            //-MODE_MULTI_PROCESS : 이미 호출되어 사용중인지 체크
            //-MODE_APPEND : 기존 PREFERENCE에 신규로 추가

#Async
- AsyncTask 상속받음
    -> onPreExcute : thread 출발 전에 할 작업
    -> doIntBackground : thread가 할 작업
    -> onPregressUpdate : 중간중간 main thread로 온다
    -> onPostExecute : 작업을 다 마치고 main thread로 복귀
- 장점 : main thread를 기다리게 할 필요 없음, 네트워크 작업
- 단점 : 재사용 불가능, 구현된 activity가 종료될 때 함께 종료되지 않음, asynctask는 하나만 실행가능(병렬처리 불가)