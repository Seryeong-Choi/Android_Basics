-dpi : dot per inch
-dp : density independent pixel : 픽셀 독립적인 단위

**androidx가 최신이므로 androidx 선택하는게 좋음
**override shortcut : ctrl + O

# Activity
- 앱의 한 화면
- Life cycle
- onCreate : 액티비티 생성시 단 한 번만 호출
- onStart
- onResume : 앱으로 다시 돌아올 때 무조건 호출
- onPause : 화면의 일부가 가려졌을때
- onStop : 화면 전부가 보이지 않을때. 근데 onPause와 onStop을 구분하기 애매하군

# Intent
- 의도, 요구, 의사전달, 요청
- 요청 관계 : Activity와 Activity / Android System과 내 app / 다른 app과 내 app -> 상호합의가 있어야 사용 가능
- 요청의 종류 : 전달만 하는 요청 / 리턴받는 요청
- 인텐트의 종류 : 명시적인텐트(정확히 대상에게 요청) / 암시적인턴트(할 수 있는 대상에게 요청)

# Context
- 문맥
- 액티비티가 갖고 있는 주변 정보

# Task
- 액티비티는 스택으로 관리됨!!
- 런치모드나 인텐트플래그로 원하는대로 스택 관리 가능하지만 사용하는게 매우 어려우므로 정확히 이해해야됨
- 켜지는 방법을 자체 속성으로 가지고있는 경우 : launchMode
- 켜지는 방법을 지시하는 경우 : IntentFlag
- LaunchMode
    - 다중 허용 : Standard, singleTop(조건부->열려고 하는 액티비티가 현재 액티비티라면 onNewIntent를 호출함)
    - 비허용 : singleTask, 1singleInstance
- IntentFlag : FLAG_ACTIVITY_NEW_TASK, FLAG_ACTIVITY_SINGLE_TOP, FLAG_ACTIVITY_CLEAR_TOP 등등
- 궁금하면 구글 디벨로퍼에서 작업 및 백 스택 문서 확인하기

#Fragment // 5-23 설명 복습
- Activity : 앱에 보이는 한 화면의 단위이지만 정확한 설명은 아니다
- 액티비티가 길어지면 관리 포인트가 많아진다 -> 관리가 어렵다
- 안드로이드는 디바이스가 너무 다양하다 -> 태블릿에서는 UI 완전 다르게 만들어야됨
- fragment는 액티비티의 파트를 나누어서 책임진다 -> 상술한 액티비티의 문제를 해결할 수 있다

- fragment에도 라이프사이클이 존재하며 액티비티 종속적이다 -> fragment의 라이프사이클도 관리해야하는 문제점이 발생함
- 쓸지 말지는 선택 가능하지만 쓰는게 유지보수 편하다(개인차 있음)
- XML에 ViewComponent로 추가하거나 코드로(동적)추가한다
- 데이터 전달 방법
    - Activity -> Fragment : argument와 bundle
    - Fragment -> Activity : 자체 구현(Listener 구현) 5-24강

#Null Safety
- ? 와 !!
- button?.setOnClickListener : null이 아니면 실행하겠다
- button!!.setOnClickListener : null이 아님을 개발자가 보장하는것이므로 정말 확실할때만 써야함